const axios = require("axios");

// –ë–∞–∑–æ–≤—ã–π URL Wiki.js
const wikiBaseUrl = "http://localhost:8080";
const wikiApiUrl = "http://localhost:8080/graphql";

// –¢–æ–∫–µ–Ω API
const apiToken =
  "eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCJ9.eyJhcGkiOjEsImdycCI6MSwiaWF0IjoxNzQ3ODI3ODM4LCJleHAiOjE3NzkzODU0MzgsImF1ZCI6InVybjp3aWtpLmpzIiwiaXNzIjoidXJuOndpa2kuanMifQ.a7hDtaAK8EXWvTPJYlYHb8AFfuufJy1sIrwh-AWkRPjaYH-VqtTECLOiq_855Pc8xAu3xrmhUvGw_9L_SfuEc6iVCVBBpB-uFmXzFn7BkYHYqdkCXBtpYB56J6Wn7fQo2Bby6LA6RJ699Ti1r8dedZ4urLmYsNnoh-mbmjtZ6gBosrY2P1oQYu3V1PdZ2cX8UvEuUdKA9duq99oDVFTGIdyDO2c5aZ2jQBX2dFzqIkBh2qSes_qIN0iQEBCSpNwJ5BijbpOlQwQTbcvfjWXEcP_2-qFOM40EI9LwqhfOXyhMkQhLPNlSPEAOW3DpNhHtOU6o9z8Y-fBRlqb-b1oPdA";

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ —Å–µ—Ä–≤–µ—Ä–∞ Wiki.js
async function checkServerStatus() {
  try {
    const response = await axios.get(wikiBaseUrl);
    console.log("‚úÖ Wiki.js –¥–æ—Å—Ç—É–ø–µ–Ω");
    return true;
  } catch (error) {
    console.error("‚ùå Wiki.js –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω:", error.message);
    console.log(
      "–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ Docker –∑–∞–ø—É—â–µ–Ω –∏ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã –∞–∫—Ç–∏–≤–Ω—ã (npm run start)"
    );
    return false;
  }
}

// –ü—Ä–æ–≤–µ—Ä–∫–∞ API
async function checkApiStatus() {
  try {
    // –ó–∞–ø—Ä–æ—Å –Ω–∞ –ø–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å–∏—Å—Ç–µ–º–µ
    const query = `
      query {
        system {
          info {
            currentVersion
            latestVersion
            telemetry
            telemetryClientId
          }
        }
      }
    `;

    const response = await axios({
      url: wikiApiUrl,
      method: "post",
      headers: {
        "Content-Type": "application/json",
        Authorization: `Bearer ${apiToken}`,
      },
      data: {
        query,
      },
    });

    if (response.data.errors) {
      console.error(
        "‚ùå API Wiki.js –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ—à–∏–±–∫–∏:",
        JSON.stringify(response.data.errors, null, 2)
      );
      return false;
    } else {
      const version = response.data.data.system.info.currentVersion;
      console.log(`‚úÖ API Wiki.js —Ä–∞–±–æ—Ç–∞–µ—Ç (–≤–µ—Ä—Å–∏—è: ${version})`);
      return true;
    }
  } catch (error) {
    console.error("‚ùå API Wiki.js –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω:", error.message);
    if (error.response) {
      console.error(
        "–î–µ—Ç–∞–ª–∏ –æ—Ç–≤–µ—Ç–∞:",
        JSON.stringify(error.response.data, null, 2)
      );
    }
    return false;
  }
}

// –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü
async function getPages() {
  try {
    // –ó–∞–ø—Ä–æ—Å –Ω–∞ –ø–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü
    const query = `
      query {
        pages {
          list {
            id
            path
            title
            description
            createdAt
            updatedAt
          }
        }
      }
    `;

    const response = await axios({
      url: wikiApiUrl,
      method: "post",
      headers: {
        "Content-Type": "application/json",
        Authorization: `Bearer ${apiToken}`,
      },
      data: {
        query,
      },
    });

    if (response.data.errors) {
      console.error(
        "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü:",
        JSON.stringify(response.data.errors, null, 2)
      );
      return [];
    } else {
      const pages = response.data.data.pages.list;
      console.log(`üìë –ù–∞–π–¥–µ–Ω–æ —Å—Ç—Ä–∞–Ω–∏—Ü: ${pages.length}`);

      if (pages.length > 0) {
        console.log("\n–°–ø–∏—Å–æ–∫ —Å—Ç—Ä–∞–Ω–∏—Ü:");
        pages.forEach((page) => {
          const dateCreated = new Date(page.createdAt).toLocaleString();
          console.log(
            `- ${page.title} (${page.path}), —Å–æ–∑–¥–∞–Ω–∞: ${dateCreated}`
          );
        });
      }

      return pages;
    }
  } catch (error) {
    console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü:", error.message);
    if (error.response) {
      console.error(
        "–î–µ—Ç–∞–ª–∏ –æ—Ç–≤–µ—Ç–∞:",
        JSON.stringify(error.response.data, null, 2)
      );
    }
    return [];
  }
}

// –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –ª–æ–∫–∞–ª–µ–π
async function getLocales() {
  try {
    // –ó–∞–ø—Ä–æ—Å –Ω–∞ –ø–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –ª–æ–∫–∞–ª–µ–π
    const query = `
      query {
        localization {
          locales {
            code
            name
            nativeName
            isRTL
            createdAt
            updatedAt
          }
        }
      }
    `;

    const response = await axios({
      url: wikiApiUrl,
      method: "post",
      headers: {
        "Content-Type": "application/json",
        Authorization: `Bearer ${apiToken}`,
      },
      data: {
        query,
      },
    });

    if (response.data.errors) {
      console.error(
        "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –ª–æ–∫–∞–ª–µ–π:",
        JSON.stringify(response.data.errors, null, 2)
      );
      return [];
    } else {
      const locales = response.data.data.localization.locales;
      console.log(`üåê –î–æ—Å—Ç—É–ø–Ω—ã–µ –ª–æ–∫–∞–ª–∏: ${locales.length}`);

      if (locales.length > 0) {
        console.log("\n–°–ø–∏—Å–æ–∫ –ª–æ–∫–∞–ª–µ–π:");
        locales.forEach((locale) => {
          console.log(
            `- ${locale.code}: ${locale.name} (${locale.nativeName})`
          );
        });
      }

      return locales;
    }
  } catch (error) {
    console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –ª–æ–∫–∞–ª–µ–π:", error.message);
    if (error.response) {
      console.error(
        "–î–µ—Ç–∞–ª–∏ –æ—Ç–≤–µ—Ç–∞:",
        JSON.stringify(error.response.data, null, 2)
      );
    }
    return [];
  }
}

// –ó–∞–ø—É—Å–∫ –ø—Ä–æ–≤–µ—Ä–æ–∫
async function runChecks() {
  console.log("=== –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ Wiki.js ===");

  const serverAvailable = await checkServerStatus();

  if (serverAvailable) {
    const apiWorks = await checkApiStatus();

    if (apiWorks) {
      console.log("\n=== –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ Wiki.js ===");
      await getPages();

      console.log("\n=== –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–æ–∫–∞–ª–µ–π Wiki.js ===");
      const locales = await getLocales();

      // –ü–æ–¥—Å–∫–∞–∑–∫–∞ –æ –ª–æ–∫–∞–ª–∏
      if (locales.length > 0) {
        const hasRuLocale = locales.some((locale) => locale.code === "ru");

        if (!hasRuLocale) {
          console.log("\n‚ö†Ô∏è –†—É—Å—Å–∫–∞—è –ª–æ–∫–∞–ª—å ('ru') –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞ –≤ Wiki.js");
          console.log(
            "–î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Ä—É—Å—Å–∫–æ–π –ª–æ–∫–∞–ª–∏ –≤ API –∑–∞–ø—Ä–æ—Å–∞—Ö –≤–∞–º –Ω—É–∂–Ω–æ:"
          );
          console.log("1. –í–æ–π—Ç–∏ –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å Wiki.js");
          console.log("2. –ü–µ—Ä–µ–π—Ç–∏ –≤ –°–∏—Å—Ç–µ–º–∞ > –õ–æ–∫–∞–ª–∏–∑–∞—Ü–∏—è");
          console.log("3. –î–æ–±–∞–≤–∏—Ç—å —Ä—É—Å—Å–∫–∏–π —è–∑—ã–∫");
          console.log(
            "4. –ü–æ—Å–ª–µ —ç—Ç–æ–≥–æ –≤—ã —Å–º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å locale: 'ru' –≤ —Å–∫—Ä–∏–ø—Ç–∞—Ö –º–∏–≥—Ä–∞—Ü–∏–∏"
          );
        }
      }
    }
  }

  console.log("\n=== –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ ===");
  console.log("1. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ Docker Desktop –∑–∞–ø—É—â–µ–Ω");
  console.log("2. –ó–∞–ø—É—Å—Ç–∏—Ç–µ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã: npm run start");
  console.log("3. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å Wiki.js: npm run check");
  console.log("4. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ API: npm run test:api");
  console.log("5. –ú–∏–≥—Ä–∞—Ü–∏—è –æ–¥–Ω–æ–≥–æ —Ñ–∞–π–ª–∞: npm run migrate:single <–ø—É—Ç—å>");
}

runChecks();
