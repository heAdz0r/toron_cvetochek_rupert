#!/usr/bin/env node

/**
 * –£—Ç–∏–ª–∏—Ç–∞ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏ MCP —Å–µ—Ä–≤–µ—Ä–∞ Wiki.js
 * –ü–æ–∑–≤–æ–ª—è–µ—Ç –≤—ã–ø–æ–ª–Ω—è—Ç—å —Ä–∞–∑–ª–∏—á–Ω—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏ –æ—Ç–ª–∞–¥–∫–∏
 */

import fetch from "node-fetch";
import { spawn } from "child_process";
import fs from "fs";
import path from "path";
import { fileURLToPath } from "url";
import { dirname } from "path";
import readline from "readline";

// –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é
const __filename = fileURLToPath(import.meta.url);
const __dirname = dirname(__filename);

// –ù–∞—Å—Ç—Ä–æ–π–∫–∏
const PORT = process.env.PORT || 3200;
const WIKIJS_BASE_URL = process.env.WIKIJS_BASE_URL || "http://localhost:8080";
const WIKIJS_TOKEN = process.env.WIKIJS_TOKEN || "";
const BASE_URL = `http://localhost:${PORT}`;
let server_process = null;

// –°–æ–∑–¥–∞–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å —á—Ç–µ–Ω–∏—è —Å –∫–æ–Ω—Å–æ–ª–∏
const rl = readline.createInterface({
  input: process.stdin,
  output: process.stdout,
});

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–¥–∞–Ω–∏—è –≤–æ–ø—Ä–æ—Å–∞
function question(query) {
  return new Promise((resolve) => rl.question(query, resolve));
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞
async function startServer() {
  console.log(`–ó–∞–ø—É—Å–∫ MCP —Å–µ—Ä–≤–µ—Ä–∞ –Ω–∞ –ø–æ—Ä—Ç—É ${PORT}...`);

  // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
  const env = {
    ...process.env,
    PORT,
    WIKIJS_BASE_URL,
    WIKIJS_TOKEN,
  };

  // –ó–∞–ø—É—Å–∫–∞–µ–º —Å–µ—Ä–≤–µ—Ä
  server_process = spawn("node", ["mcp_http_server.js"], {
    env,
    cwd: __dirname,
    stdio: "pipe", // –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –≤—ã–≤–æ–¥ –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
  });

  // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ª–æ–≥–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—ã–≤–æ–¥–∞ —Å–µ—Ä–≤–µ—Ä–∞
  const logFile = fs.createWriteStream(path.join(__dirname, "debug.log"), {
    flags: "a",
  });

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–≤–æ–¥–∞
  server_process.stdout.on("data", (data) => {
    const output = data.toString();
    logFile.write(`[STDOUT] ${output}`);
    console.log(`[STDOUT] ${output}`);
  });

  server_process.stderr.on("data", (data) => {
    const output = data.toString();
    logFile.write(`[STDERR] ${output}`);
    console.error(`[STDERR] ${output}`);
  });

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–±—ã—Ç–∏–π –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
  server_process.on("close", (code) => {
    console.log(`–°–µ—Ä–≤–µ—Ä –∑–∞–≤–µ—Ä—à–∏–ª —Ä–∞–±–æ—Ç—É —Å –∫–æ–¥–æ–º ${code}`);
    logFile.end();
    server_process = null;
  });

  console.log(`–ó–∞–ø—É—â–µ–Ω MCP —Å–µ—Ä–≤–µ—Ä, PID: ${server_process.pid}`);
  logFile.write(
    `[DEBUG] –ó–∞–ø—É—â–µ–Ω MCP —Å–µ—Ä–≤–µ—Ä ${new Date().toISOString()}, PID: ${
      server_process.pid
    }\n`
  );

  // –ñ–¥–µ–º –Ω–µ–º–Ω–æ–≥–æ –¥–ª—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Å–µ—Ä–≤–µ—Ä–∞
  await new Promise((resolve) => setTimeout(resolve, 2000));

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—Å—Ç–∏–ª—Å—è —É—Å–ø–µ—à–Ω–æ
  try {
    const response = await fetch(`${BASE_URL}/health`);
    if (response.ok) {
      const data = await response.json();
      console.log(`‚úÖ –°—Ç–∞—Ç—É—Å —Å–µ—Ä–≤–µ—Ä–∞: ${data.status} - ${data.message}`);
      return true;
    }
  } catch (error) {
    console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å–µ—Ä–≤–µ—Ä–∞: ${error.message}`);
  }

  return false;
}

// –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞
function stopServer() {
  if (server_process) {
    console.log(`–û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞, PID: ${server_process.pid}...`);
    server_process.kill();
    return true;
  }

  console.log("–°–µ—Ä–≤–µ—Ä –Ω–µ –∑–∞–ø—É—â–µ–Ω");
  return false;
}

// –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ —Å–µ—Ä–≤–µ—Ä–∞
async function checkServerStatus() {
  try {
    const response = await fetch(`${BASE_URL}/health`);
    if (response.ok) {
      const data = await response.json();
      console.log(`‚úÖ –°—Ç–∞—Ç—É—Å —Å–µ—Ä–≤–µ—Ä–∞: ${data.status} - ${data.message}`);
      return data;
    }
  } catch (error) {
    console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å–µ—Ä–≤–µ—Ä–∞: ${error.message}`);
  }

  return null;
}

// –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤
async function getTools() {
  try {
    const response = await fetch(`${BASE_URL}/tools`);
    if (response.ok) {
      const tools = await response.json();
      console.log(`‚úÖ –ü–æ–ª—É—á–µ–Ω–æ ${tools.length} –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤:`);

      tools.forEach((tool, index) => {
        console.log(
          `${index + 1}. ${tool.function.name} - ${tool.function.description}`
        );
      });

      return tools;
    }
  } catch (error) {
    console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤: ${error.message}`);
  }

  return [];
}

// –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞ –∫ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—É
async function testTool(toolName, params = {}) {
  try {
    console.log(
      `üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞ '${toolName}' —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏:`,
      params
    );

    const method =
      toolName.startsWith("create_") ||
      toolName.startsWith("update_") ||
      toolName.startsWith("delete_")
        ? "POST"
        : "GET";

    let url = `${BASE_URL}/${toolName}`;

    // –î–ª—è GET-–∑–∞–ø—Ä–æ—Å–æ–≤ –ø—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –≤ —Å—Ç—Ä–æ–∫—É –∑–∞–ø—Ä–æ—Å–∞
    if (method === "GET" && Object.keys(params).length > 0) {
      const queryParams = new URLSearchParams();
      for (const [key, value] of Object.entries(params)) {
        queryParams.append(key, String(value));
      }
      url += `?${queryParams.toString()}`;
    }

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å
    const startTime = Date.now();

    const response = await fetch(url, {
      method,
      headers: {
        "Content-Type": "application/json",
      },
      body: method === "POST" ? JSON.stringify(params) : undefined,
    });

    const endTime = Date.now();
    const duration = endTime - startTime;

    if (response.ok) {
      const result = await response.json();
      console.log(
        `‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç (${duration}ms):`,
        JSON.stringify(result, null, 2)
      );
      return { success: true, data: result, duration };
    } else {
      const error = await response.text();
      console.error(`‚ùå –û—à–∏–±–∫–∞ (${duration}ms): ${response.status} - ${error}`);
      return { success: false, error, duration };
    }
  } catch (error) {
    console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–∑–æ–≤–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞: ${error.message}`);
    return { success: false, error: error.message };
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
async function benchmarkTool(toolName, params = {}, iterations = 10) {
  console.log(
    `üîÑ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ '${toolName}' (${iterations} –∏—Ç–µ—Ä–∞—Ü–∏–π)...`
  );

  const results = [];
  let successCount = 0;
  let totalDuration = 0;

  for (let i = 0; i < iterations; i++) {
    const result = await testTool(toolName, params);

    if (result.success) {
      successCount++;
      totalDuration += result.duration;
    }

    results.push(result);

    // –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
    await new Promise((resolve) => setTimeout(resolve, 100));
  }

  const avgDuration = successCount > 0 ? totalDuration / successCount : 0;

  console.log("\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏:");
  console.log(`–£—Å–ø–µ—à–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤: ${successCount}/${iterations}`);
  console.log(`–°—Ä–µ–¥–Ω—è—è –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: ${avgDuration.toFixed(2)}ms`);
  console.log(
    `–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: ${Math.min(
      ...results.filter((r) => r.success).map((r) => r.duration)
    )}ms`
  );
  console.log(
    `–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: ${Math.max(
      ...results.filter((r) => r.success).map((r) => r.duration)
    )}ms`
  );

  return {
    successRate: successCount / iterations,
    avgDuration,
    results,
  };
}

// –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
async function showMainMenu() {
  while (true) {
    console.log("\n===== –ú–µ–Ω—é –æ—Ç–ª–∞–¥–∫–∏ MCP —Å–µ—Ä–≤–µ—Ä–∞ Wiki.js =====");
    console.log("1. –ó–∞–ø—É—Å—Ç–∏—Ç—å —Å–µ—Ä–≤–µ—Ä");
    console.log("2. –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å–µ—Ä–≤–µ—Ä");
    console.log("3. –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å —Å–µ—Ä–≤–µ—Ä–∞");
    console.log("4. –ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤");
    console.log("5. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç");
    console.log("6. –¢–µ—Å—Ç –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞");
    console.log("7. –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ª–æ–≥ –æ—Ç–ª–∞–¥–∫–∏");
    console.log("8. –í—ã—Ö–æ–¥");

    const choice = await question("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ (1-8): ");

    switch (choice) {
      case "1":
        await startServer();
        break;
      case "2":
        stopServer();
        break;
      case "3":
        await checkServerStatus();
        break;
      case "4":
        await getTools();
        break;
      case "5":
        await testToolMenu();
        break;
      case "6":
        await benchmarkMenu();
        break;
      case "7":
        await viewLogs();
        break;
      case "8":
        console.log("–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã...");
        if (server_process) {
          stopServer();
        }
        rl.close();
        return;
      default:
        console.log("–ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 8.");
    }
  }
}

// –ú–µ–Ω—é —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞
async function testToolMenu() {
  // –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤
  const tools = await getTools();

  if (tools.length === 0) {
    console.log("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤ –∏–ª–∏ —Å–µ—Ä–≤–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω");
    return;
  }

  const toolIndex =
    parseInt(await question(`–í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç (1-${tools.length}): `)) - 1;

  if (toolIndex < 0 || toolIndex >= tools.length) {
    console.log("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞");
    return;
  }

  const selectedTool = tools[toolIndex];
  console.log(`–í—ã–±—Ä–∞–Ω –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç: ${selectedTool.function.name}`);

  // –ü–æ–ª—É—á–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞
  const params = {};

  if (
    selectedTool.function.parameters &&
    selectedTool.function.parameters.properties
  ) {
    const properties = selectedTool.function.parameters.properties;
    const required = selectedTool.function.parameters.required || [];

    console.log("–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞:");

    for (const [key, schema] of Object.entries(properties)) {
      const isRequired = required.includes(key);
      const paramPrompt = `${key}${isRequired ? " (–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)" : ""}: `;

      let value = await question(paramPrompt);

      if (value.trim() === "" && !isRequired) {
        continue;
      }

      // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–∏ —Å —Ç–∏–ø–æ–º
      if (schema.type === "number" || schema.type === "integer") {
        value = Number(value);
      } else if (schema.type === "boolean") {
        value = value.toLowerCase() === "true";
      }

      params[key] = value;
    }
  }

  // –¢–µ—Å—Ç–∏—Ä—É–µ–º –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç
  await testTool(selectedTool.function.name, params);
}

// –ú–µ–Ω—é —Ç–µ—Å—Ç–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
async function benchmarkMenu() {
  // –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤
  const tools = await getTools();

  if (tools.length === 0) {
    console.log("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤ –∏–ª–∏ —Å–µ—Ä–≤–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω");
    return;
  }

  const toolIndex =
    parseInt(await question(`–í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç (1-${tools.length}): `)) - 1;

  if (toolIndex < 0 || toolIndex >= tools.length) {
    console.log("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞");
    return;
  }

  const selectedTool = tools[toolIndex];
  console.log(`–í—ã–±—Ä–∞–Ω –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç: ${selectedTool.function.name}`);

  // –ü–æ–ª—É—á–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
  const params = {};

  if (
    selectedTool.function.parameters &&
    selectedTool.function.parameters.properties
  ) {
    const properties = selectedTool.function.parameters.properties;
    const required = selectedTool.function.parameters.required || [];

    console.log("–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞:");

    for (const [key, schema] of Object.entries(properties)) {
      const isRequired = required.includes(key);
      const paramPrompt = `${key}${isRequired ? " (–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)" : ""}: `;

      let value = await question(paramPrompt);

      if (value.trim() === "" && !isRequired) {
        continue;
      }

      // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–∏ —Å —Ç–∏–ø–æ–º
      if (schema.type === "number" || schema.type === "integer") {
        value = Number(value);
      } else if (schema.type === "boolean") {
        value = value.toLowerCase() === "true";
      }

      params[key] = value;
    }
  }

  // –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏—Ç–µ—Ä–∞—Ü–∏–π
  const iterations = parseInt(
    (await question("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏—Ç–µ—Ä–∞—Ü–∏–π (10): ")) || "10"
  );

  // –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
  await benchmarkTool(selectedTool.function.name, params, iterations);
}

// –ü—Ä–æ—Å–º–æ—Ç—Ä –ª–æ–≥–æ–≤
async function viewLogs() {
  const logPath = path.join(__dirname, "debug.log");

  if (!fs.existsSync(logPath)) {
    console.log("‚ùå –§–∞–π–ª –ª–æ–≥–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω");
    return;
  }

  const lines = parseInt(
    (await question("–°–∫–æ–ª—å–∫–æ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Å—Ç—Ä–æ–∫ –ø–æ–∫–∞–∑–∞—Ç—å (20): ")) || "20"
  );

  try {
    // –ß–∏—Ç–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ N —Å—Ç—Ä–æ–∫ –∏–∑ —Ñ–∞–π–ª–∞ –ª–æ–≥–∞
    const data = fs.readFileSync(logPath, "utf8");
    const logLines = data.split("\n").filter((line) => line.trim() !== "");

    const startLine = Math.max(0, logLines.length - lines);
    const endLine = logLines.length;

    console.log(`\nüìú –ü–æ—Å–ª–µ–¥–Ω–∏–µ ${endLine - startLine} —Å—Ç—Ä–æ–∫ –∏–∑ –ª–æ–≥–∞:`);

    for (let i = startLine; i < endLine; i++) {
      console.log(logLines[i]);
    }
  } catch (error) {
    console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ –ª–æ–≥-—Ñ–∞–π–ª–∞: ${error.message}`);
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
console.log("üîç –ó–∞–ø—É—Å–∫ —É—Ç–∏–ª–∏—Ç—ã –æ—Ç–ª–∞–¥–∫–∏ MCP —Å–µ—Ä–≤–µ—Ä–∞ Wiki.js");
showMainMenu().catch((error) => {
  console.error(`‚ùå –û—à–∏–±–∫–∞: ${error.message}`);
  if (server_process) {
    stopServer();
  }
  rl.close();
});
